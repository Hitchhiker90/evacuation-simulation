
====================
=== REQUIREMENTS ===
====================

To run the application, you need to have a distribution of Python (tested with Python 3.7 and 3.8),
with the Mesa package installed (developed and tested with Mesa 0.8.7, which was the default verision at the time),
e.g. with 'pip install mesa'. All other dependencies should be installed with Mesa, if not already present.


================================
=== STARTING THE APPLICATION ===
================================

After unzipping the submission file, open the command-line interface and navigate to the folder containing the extracted
files. The folder will have the file structure indicated below. To run the application, simply run the 'server.py' file 
with the appropriate version of Python 3, e.g. with 'python server.py' or 'python3 server.py'.

The browser should be automatically opened, if that does not happen, open the browser and enter the url displayed
in the console - typically it will be 'http://127.0.0.1:8521', but consecutive port numbers will be tried and used 
if the default is not available.

Tested on Win10 and Ubuntu 20.04.


======================
=== FILE STRUCTURE ===
======================

The file/folder structure of the submission, with a brief description of each file:


- assets/           - this folder contains the .json files defining the environments, the .npy files containing the visibility arrays
		      for each environment and the .png sprites for walls and other environment elements.


- logs/             - this folder will contain all of the logs generated by the application.


- templates/        - contains the HTML template file for the UI ('modular_template.html'), as well as subfolders for CSS and JS files.
  |
  |
  |-- css/          - contains the CSS file ('simulation-visuals.css') defining the style of the UI and its elements.
  |
  |
  |-- js/           - contains the JS files:
      | 
      |-- jquery.js             - jQuery (dependency used by Mesa).
      | 
      |-- runcontrol.js         - A heavily modified version of the default Mesa's controller. This file handles most of the UI elements
      |                           and functionalities, including the control over the progress of the simulation runs and batch schedules
      |                           and the handling and exchange of messages with the Python model.
      | 
      |-- CanvasModule.js       - A modified version of the default Mesa's CanvasModule.js. Handles the creation, placement and sizing of the
      |                           HTML canvas elements.
      | 
      |-- GridDraw.js           - Handles the actual drawing of all environment components on the HTML canvas. A version of the default Mesa's
      |                           GridDraw.js, slightly modified to accommodate pre-cached custom sprites. 
      | 
      |-- InteractionHandler.js - A modified version of the default Mesa's InteractionHandler.js with minor adjustments. Handles the creation 
      |                           of an interaction layer that displays the tooltips with the parameters of agents / environment components.
      | 
      |-- CanvasInteraction.js  - A script further extending the interaction capabilities of the environment canvas element, adding event listeners
      |                           that control the dragging of the simulation environment (if larger than the display area) and the capabilities
      |                           for placing and selecting agents and other objects by clicking on the simulation environment.


- config.py         - a small configuration file defining a few global parameters


- server.py         - the file containing the definitions of the extended Mesa classes (SocketHandler, PageHandler and ModularServer),
		      responsible for defining and starting the Tornado server for the application, processing the messages from and sending
		      messages to the JS controller, and defining the visuals for the environment and its elements. 


- simulation.py     - this file contains the definitions for the extended Mesa classes for the model (SimulationEngine), 
		      the environment grid (FloorPlan) and other environment elements (Tile, Cell, Exit, Obstacle, Sign, Fire, Heat, Smoke)
		      as well as for the agents (Adult and Child), covering all of those elements' parameters, setup and logic.